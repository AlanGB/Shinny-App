abline(fit, col="red")
predict(fit, data.frame(x))
est <- predict(fit, data.frame(x))
fit
summary(fit)
data("mtcars")
fit <- lm(mpg ~ weight, mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
nrow(mtcars)
n <- nrwow(mtcars)
df <- n -2
fit$coefficients
b1 <- fit$coefficients[2]
varb1 <- var(mtcars$wt) / sum((mtcars$wt - mean(mtcars$wt))^2)
b1 + c(-1,1) * qt(0.975, df) * varb1
?predict
predict(fit, data.frame(x), interval = "confidence")
fit <- lm(mpg ~ wt, mtcars)
predict(fit, data.frame(x), interval = "confidence")
fit
predict(fit, data.frame(x= mean(x), interval = "confidence")
predict(fit, data.frame(x= mean(x)), interval = "confidence")
predict(fit, data.frame(x= mean(x)), interval = "confidence")
fit <- lm(mpg ~ wt, mtcars)
fit
predict(fit, data.frame(x= mean(x)), interval = "confidence")
x <- mtcars$mpg
y <- mtcars$wt
fit <- lm(y ~ x)
predict(fit, data.frame(x= mean(x)), interval = "confidence")
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y ~ x)
predict(fit, data.frame(x= mean(x)), interval = "confidence")
?mtcars
predict(fit, data.frame(x= 3), interval = "confidence")
predict(fit, data.frame(x= 3), interval = "prediction")
predict(fit, data.frame(x= 2), interval = "prediction")
predict(fit, data.frame(x= 2), interval = "confidence")
fit <- lm(y ~ I(x/2))
predict(fit, data.frame(x=1), interval = "confidence")
summary(fit)
fit <- lm(y ~ I(x/2))
b0 <- fit$coefficients[1]
b1 <- fit$coefficients[2]
fit$coefficients
fit$coefficients[2,1]
summary(fit)$coefficients
summary(fit)$coefficients[2,1]
s1 <- summary(fit)$coefficients[2,2]
b0 + c(-1,1) * qt(0.9705,30) * s1
b0 + c(-1,1) * qt(0.9705,30) * s1^2
b0 + c(-1,1) * qt(0.9705,28) * s1^2
fit <- lm(y ~ I(x*2))
b0 <- fit$coefficients[1]
b1 <- fit$coefficients[2]
s1 <- summary(fit)$coefficients[2,2]
b0 + c(-1,1) * qt(0.9705,28) * s1^2
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y ~ I(x * 2))
summary(fit)
fitt <- lm(y ~ x)
fitt
summary(fitt)
b1 <- cor(y,x) * sd(y) / sd(x)
b0 <- mean(y) - b1 * mean(x)
df <- length(x) -2
a <- 2
lfit <- function(x) (b0 + (b1/a) * (x * ))
lfit <- function(x) (b0 + (b1/a) * (x * a))
lfit(1)
plot(x,y)
lfit <- function(x) (b0 + (b1 * a) * (x / a))
lfit(1)
b1 * a
length(x)
sum((y - lfit)^2)
sum((y - lfit(x))^2)
lfit(x)
e <- sum((y - lfit(x))^2) / 32
b1*a + c(-1,1) * qt(0.975, 30) * e
b1*a + c(-1,1) * qt(0.975, 30) * sqrt(e)
fit2<-lm(y~I(x/2))
tbl2<-summary(fit2)$coefficients
mn<-tbl2[2,1]      #mean is the estimated slope
std_err<-tbl2[2,2] #standard error
deg_fr<-fit2$df    #degree of freedom
#Two sides T-Tests
mn + c(-1,1) * qt(0.975,df=deg_fr) * std_err
b1 + c(-1,1) * qt(0.975, 30) * sqrt(e)
e <- sum((y - lfit(x))^2) / 30
b1*a + c(-1,1) * qt(0.975, 30) * sqrt(e)
b1 + c(-1,1) * qt(0.975, 30) * sqrt(e)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
est <- predict(fit, data.frame(x))
fit
summary(fit)
?predict
data("mtcars")
x <- mtcars$wt
y <- mtcars$mpg
fit2 <- lm(y ~ I(x * a))
fit <- lm(y ~ x)
est2 <- predict(fit, data.frame(x), interval = "confidence")
est2
summary(est2)
est2 <- predict(fit, x = mean(x), interval = "confidence")
summary(est2)
est2
summary(est2)
est2
est2 <- predict(fit, data.frame(x = mean(x)), interval = "confidence")
est2
x <- mtcars$wt
y <- mtcars$mpg
b1 <- cor(y,x) * sd(y) / sd(x)
b0 <- mean(y) - b1 * mean(x)
a <- 1
lfit <- function(x) (b0 + (b1 * a) * (x / a))
a <- 2
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y ~ I(x/a))
summary(fit)
b1 <- cor(y,x) * sd(y) / sd(x)
b1 <- cor(y,x) * sd(y) / sd(x) * a
b0 <- mean(y) - b1 * mean(x)
b0 <- mean(y) - b1 * mean(x)
b0 <- mean(y) - b1 * mean(x * a)
mean(y)
a <- 2
x <- mtcars$wt
y <- mtcars$mpg
b1 <- cor(y,x) * sd(y) / sd(x) * a
b0 <- mean(y) - b1 * mean(x)
mean(x)
b1
mean(y)
mean(y) - b2 * mean(x)
mean(y) - b1 * mean(x)
plot(x,y)
mean(y) + b1 * mean(x)
b1 <- summary(fit)$Coefficient
b1
summary(fit)
summary(fit)$coefficient
b1 <- summary(fit)$coefficient[2,1]
b0 <- summary(fit)$coefficient[1,1]
b1 + c(-1,1) * qt(0.975, 30) * summary(fit)$coefficient[2,1]
fit2<-lm(y~I(x/2))
tbl2<-summary(fit2)$coefficients
mn<-tbl2[2,1]      #mean is the estimated slope
std_err<-tbl2[2,2] #standard error
deg_fr<-fit2$df    #degree of freedom
#Two sides T-Tests
mn + c(-1,1) * qt(0.975,df=deg_fr) * std_err
fit <- lm(y ~ I(x/a))
x <- mtcars$wt
y <- mtcars$mpg
b1 <- summary(fit)$coefficient[2,1]
b0 <- summary(fit)$coefficient[1,1]
b1 + c(-1,1) * qt(0.975, 30) * summary(fit)$coefficient[2,1]
tbl2
mn
std_err
summary(fit)$coefficient[2,1]
summary(fit)$coefficient[2,2]
b1 + c(-1,1) * qt(0.975, 30) * summary(fit)$coefficient[2,2]
model1 <- lm(y~1)
model2 <- lm(y~2)
model2 <- lm(y~x)
summary(model1)
summary(model2)
lfit <- function(x) (b0 + b1 * x)
lfit2 <- function(x) (b0)
suma = 0
for (i in 1:32) {
suma <- suma + (lfit(x[i]) - mean(y)^2
}
for (i in 1:32) {
suma <- suma + (lfit(x[i]) - mean(y)^2
}
suma = 0
for (i in 1:32) {
suma <- suma + (lfit(x[i]) - mean(y)^2
}
for (i in 1:32) {
suma <- suma + (lfit(x[i]) - mean(y)^2)
}
suma = 0
for (i in 1:32) {
suma <- suma + (lfit(x[i]) - mean(y))^2
}
suma2 <- (y - b0)^2
suma2 <- sum((y - b0)^2)
suma/suma2
suma2/suma
summary(fit)
anova(fit)
anova(lm(y~1))
278.32 / 1126
rm(list= ls())
library(swirl)
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant - 1, trees)
trees2 <- rliminsyr("Grith", trees)
trees2 <- eliminate("Grith",trees)
trees2 <- eliminate("Girth",trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit,fit2), coef)
lm(Fertility ~ ., swiss)
all <- lm(Fertility ~ ., swiss)
summary(all)
lm(Fertility ~ agriculture)
lm(Fertility ~ agriculture, swiss)
lm(Fertility ~ Agriculture, swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- swiss$Examination +  swiss$Catholic
lm(Fertility ~ . + ec, swiss)
efit <- lm(Fertility ~ . + ec, swiss)
efit - effit$coefficients
efit - efit$coefficients
cf - effit$coefficients
s
0
all$coefficients  efit$coefficients
all$coefficients - efit$coefficients
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays,15)
sB
summary(InsectSprays[,2])
sapply(InsectSprays, class)
fit <- lm(count, spray, InsectSprays)
fit <- lm(count ~ spray, InsectSprays)
summary(fit$coefficients)
summary(fit)$coef
est <- summary(fit)[,1]
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- (count ~ spray -1, InsectSprays)
nfit <- lm(count ~ spray -1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray -1, spray2)
fit2 <- lm(count ~ spray -1, InsectSprays)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[4] - fit$coef[2]) / 1.6011
(fit$coef[2] - fit$coef[3]) / 1.6011
rm(list = ls())
require(swirl)
swirl()
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmf <- lm(hunger[hunger$Sex == "Female", "Numeric"] ~hunger[hunger$Sex == "Female","Year"])
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <- lmF <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
rm(list = ls())
require(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ . - Examination, swiss)
vif(mdl2)
rm(list = ls())
install.packages("caret")
library(caret)
install.packages("ISLR")
library(ISLR)
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list)
training <- Wage[inTrain,]; testing <- Wage[-inTrainl]
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrainl]
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
table(training$jobclass)
dumies <- dummyVars(wage ~ jobclass, data=training)
head(predict(dummies, newdata=training))
dummies <- dummyVars(wage ~ jobclass, data=training)
head(predict(dummies, newdata=training))
rm(list = ls())
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
featurePlot(x=training, y=training$CompressiveStrength)
featurePlot(x=training, y=training$CompressiveStrength, plot="pairs")
featurePlot(y=training$CompressiveStrength)
plot(y=training$CompressiveStrength)
plot(training$CompressiveStrength)
install.packages("Hmisc")
library(Hmisc)
cutcomp <- cut2(training$CompressiveStrength, g = 4)
p <- qplot(cutcomp, fill = Age)
p
p <- qplot(cutcomp, data = training, fill = Age)
p
p <- qplot(cutcomp,training$CompressiveStrength, data = training, fill = Age)
p
p <- qplot(cutcomp,training$Age, data = training, fill = Age)
p
install.packages("plotly")
knitr::opts_chunk$set(echo = FALSE)
library(quakes)
data(quakes)
# Download data frame
data("USArrests")
data("USArrests")
plot_ly(data = USArrests, x = UrbanPop, y = Murder, mode = "markers")
library(plotly)
plot_ly(data = USArrests, x = UrbanPop, y = Murder, mode = "markers")
View(USArrests)
plot_ly(USArrests, x = UrbanPop, y = Murder, mode = "markers")
plot_ly(USArrests, x = UrbanPop, y = Murder, mode = "markers")
USArrests$UrbanPop
plot_ly(USArrests, x = USArrests$UrbanPop, y = USArrests$Murder, mode = "markers")
shiny::runApp('GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
setwd("~/GitHub/Week-4-Assignment/ShinyApp/")
runApp('StoppingDistance')
runApp('StoppingDistance')
runApp('StoppingDistance')
?dashboardBody
runApp('StoppingDistance')
?plotlyOutput
??plotlyOutput
runApp('StoppingDistance')
runApp('StoppingDistance')
runApp('StoppingDistance')
runApp('StoppingDistance')
install.packages("DT")
runApp('StoppingDistance')
runApp('StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/MyShinyWebApp')
runApp('StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/MyShinyWebApp')
runApp('StoppingDistance')
runApp('StoppingDistance')
runApp('StoppingDistance')
runApp()
runApp('StoppingDistance')
runApp()
runApp('StoppingDistance')
runApp()
runApp('StoppingDistance')
?autoplot
runApp('StoppingDistance')
?renderPlotly
runApp('StoppingDistance')
runApp('StoppingDistance')
runApp('StoppingDistance')
runApp('StoppingDistance')
library(plotly)
data(cars)
?plot_ly
carsdf <- as.data.frame(cars)
View(cars)
plot_ly(data = cars, x = speed, y = dist, mode = "markers")
plot_ly(data = cars, x = cars$peed, y = cars$dist, mode = "markers")
max(cars$speed)
plot_ly(data = cars, x = cars$peed, y = cars$dist, mode = "scatter")
?plot_ly
plot_ly(data = cars, x = cars$peed, y = cars$dist, type = "scatter")
plot_ly(data = cars, x = cars$peed, y = cars$dist, type = "scatter", mode = "markers")
plot_ly(data = cars, x = cars$speed, y = cars$dist, type = "scatter", mode = "markers")
?add_lines
fit.lm <- lm(dist ~ speed - 1, data = cars)
p <- plot_ly(data = cars, x = cars$speed, y = cars$dist, type = "scatter", mode = "markers")
p %>% add_lines(fit.lm)
p <- plot_ly(data = cars, x = cars$speed, y = cars$dist, type = "scatter", mode = "markers")
p %>% add_lines(fit.lm, x = ~speed, y=fitted(fit.lm))
p %>% add_lines(fit.lm, y=fitted(fit.lm))
p %>% add_lines(fit.lm, x = speed, y=fitted(fit.lm))
p %>%
add_markers(x = ~speed) %>%
add_lines(fit.lm, x = speed, y=fitted(fit.lm))
p %>%
add_markers(x = ~speed) %>%
add_lines(fit.lm, y=fitted(fit.lm))
plot(fit.lm)
plot(fit.lm)
plot(cars)
line(fit.lm)
lines(fit.lm)
abline(fit.lm)
plot(fit.lm)
plot(fit.lm)
p <- plot_ly(data = cars, x = cars$speed, y = cars$dist, type = "scatter", mode = "markers")
p
cars %>%
plot_ly(data = cars, x = cars$speed, y = cars$dist, type = "scatter", mode = "markers") %>%
add_markers(x = ~speed) %>%
add_lines(fit.lm, y=fitted(fit.lm))
cars %>%
plot_ly(x = cars$speed, y = cars$dist, type = "scatter", mode = "markers") %>%
add_markers(x = ~speed) %>%
add_lines(fit.lm, y=fitted(fit.lm))
cars %>%
plot_ly(x = cars$speed) %>%
add_markers(x = ~speed) %>%
add_lines(fit.lm, y=fitted(fit.lm))
cars %>%
plot_ly(x = ~speed) %>%
add_markers(y = ~dist) %>%
add_lines(fit.lm, y=fitted(fit.lm))
runApp('StoppingDistance')
runApp('StoppingDistance')
runApp('StoppingDistance')
runApp('StoppingDistance')
runApp('StoppingDistance')
runApp('StoppingDistance')
runApp('StoppingDistance')
?ggtsdiag_custom
??ggtsdiag_custom
plot(fit.lm$residuals)
plot(fit.lm$df.residual)
plot(fit.lm$df.residual)
plot(fit.lm$fitted.values)
par(mfrow = c(2, 2))
plot(fit.lm)
runApp('StoppingDistance')
runApp('StoppingDistance')
runApp('StoppingDistance')
runApp('StoppingDistance')
?cars
predict(fit.lm,newdata = data.frame(speed =20))
predict(fit.lm,newdata = data.frame(speed =20))[2]
predict(fit.lm,newdata = data.frame(speed =20))[2][1]
predict(fit.lm,newdata = data.frame(speed =20))[1]
class(predict(fit.lm,newdata = data.frame(speed =20))[1])
runApp('~/GitHub/Week-4-Assignment/MyShinyWebApp')
runApp('StoppingDistance')
runApp('StoppingDistance')
runApp('StoppingDistance')
runApp('StoppingDistance')
runApp('StoppingDistance')
runApp('StoppingDistance')
runApp('StoppingDistance')
runApp('StoppingDistance')
runApp('StoppingDistance')
runApp('StoppingDistance')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
shiny::runApp('StoppingDistance')
runApp('StoppingDistance')
library(rsconnect)
column(width = 4,
box(selectInput("model","Select Regression Model:",
c("Linear Regression" = "fit.lm",
"Spline Regression" = "fit.sp")),
width = NULL),
box(verbatimTextOutput("test.output"),
width = NULL),
box(sliderInput("slider.speed","What is the car's speed in mph?",0,25, value = 10),
width = NULL),
box(verbatimTextOutput("pred.output"), title = "The stopping distance in miles is:",
width = NULL))
rsconnect::deployApp('./')
rsconnect::deployApp('./StoppingDistance')
runApp('StoppingDistance')
runApp('StoppingDistance')
rsconnect::deployApp('./StoppingDistance')
data(cars)
modelA <- lm(dist ~ speed - 1, data = cars)
predict(modelA, newdata = data.frame(speed = 20))
cars$speedsp <- ifelse(cars$speed - 19 > 0, cars$speed -19, 0)
modelB <- lm(dist ~ speedsp + speed - 1, data = cars)
predict(modelB, newdata = data.frame(speed = 19, speedsp = 0))
```
- **Model used**: a text box with the formula of the selected model.
rsconnect::deployApp('./StoppingDistance')
