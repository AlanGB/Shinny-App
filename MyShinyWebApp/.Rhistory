mean(sB)
nfit <- (count ~ spray -1, InsectSprays)
nfit <- lm(count ~ spray -1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray -1, spray2)
fit2 <- lm(count ~ spray -1, InsectSprays)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[4] - fit$coef[2]) / 1.6011
(fit$coef[2] - fit$coef[3]) / 1.6011
rm(list = ls())
require(swirl)
swirl()
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmf <- lm(hunger[hunger$Sex == "Female", "Numeric"] ~hunger[hunger$Sex == "Female","Year"])
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <- lmF <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
rm(list = ls())
require(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ . - Examination, swiss)
vif(mdl2)
rm(list = ls())
install.packages("caret")
library(caret)
install.packages("ISLR")
library(ISLR)
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list)
training <- Wage[inTrain,]; testing <- Wage[-inTrainl]
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrainl]
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
table(training$jobclass)
dumies <- dummyVars(wage ~ jobclass, data=training)
head(predict(dummies, newdata=training))
dummies <- dummyVars(wage ~ jobclass, data=training)
head(predict(dummies, newdata=training))
rm(list = ls())
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
featurePlot(x=training, y=training$CompressiveStrength)
featurePlot(x=training, y=training$CompressiveStrength, plot="pairs")
featurePlot(y=training$CompressiveStrength)
plot(y=training$CompressiveStrength)
plot(training$CompressiveStrength)
install.packages("Hmisc")
library(Hmisc)
cutcomp <- cut2(training$CompressiveStrength, g = 4)
p <- qplot(cutcomp, fill = Age)
p
p <- qplot(cutcomp, data = training, fill = Age)
p
p <- qplot(cutcomp,training$CompressiveStrength, data = training, fill = Age)
p
p <- qplot(cutcomp,training$Age, data = training, fill = Age)
p
install.packages("plotly")
knitr::opts_chunk$set(echo = FALSE)
library(quakes)
data(quakes)
# Download data frame
data("USArrests")
data("USArrests")
plot_ly(data = USArrests, x = UrbanPop, y = Murder, mode = "markers")
library(plotly)
plot_ly(data = USArrests, x = UrbanPop, y = Murder, mode = "markers")
View(USArrests)
plot_ly(USArrests, x = UrbanPop, y = Murder, mode = "markers")
plot_ly(USArrests, x = UrbanPop, y = Murder, mode = "markers")
USArrests$UrbanPop
plot_ly(USArrests, x = USArrests$UrbanPop, y = USArrests$Murder, mode = "markers")
rm(list = ls())
shiny::runApp('GitHub/Week-4-Assignment/MyShinyWebApp')
runApp('GitHub/Week-4-Assignment/MyShinyWebApp')
runApp('GitHub/Week-4-Assignment/MyShinyWebApp')
?sliderInput
runApp('GitHub/Week-4-Assignment/MyShinyWebApp')
setwd("~/GitHub/Week-4-Assignment/MyShinyWebApp")
runApp()
runApp()
runApp()
runApp()
?plotOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sliderInput
?sidebarLayout
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(datasets)
library("BJsales")
library(BJsales)
dataset("BJsales")
load(BJsales)
data(BJsales)
head(BJsales)
View(BJsales)
data(BJsales.lead)
View(BJsales.lead)
data("ToothGrowth")
View(ToothGrowth)
plot(dose, len, ToothGrowth)
plot(dose, len, data = ToothGrowth)
plot(dose, len, data = ToothGrowth)
plot(ToothGrowth$dose, ToothGrowth$len)
data("swiss")
View("swiss")
View(swiss)
runApp()
plot(swiss$Education, swiss$Fertility)
plot(swiss$Agriculture, swiss$Fertility)
plot(swiss$Examination, swiss$Fertility)
data("austres")
View(austres)
plot(austres)
data("longley")
View(longley)
plot(BJsales)
data("nhtemp")
View(nhtemp)
plot(nhtemp)
nhtemp$Time
length(nhtemp)
train.nh <- nhtemp[1:54]
test.nh <- nhtemp[55:60]
install.packages("fpp2")
# Initial plot
libray(fpp2)
library(fpp2)
autoplot(train.nh)
?window
autoplot(nhtemp)
?fpp2:windwos
?fpp2:windwow
?window
train.nh <- window(nhtemp, start = 1912, end = 1965)
test.nh <- window(nhtemp, start = 1966, end = 1971)
?meanf
autoplot(train.nh) +
autolayer(meanf(train.nh, h = 6),
series = "Mean", PI = FALSE)
train.nh <- window(nhtemp, start = 1912, end = 1961)
test.nh <- window(nhtemp, start = 1962, end = 1971)
autoplot(train.nh) +
autolayer(meanf(train.nh, h = 6),
series = "Mean", PI = FALSE)
autoplot(train.nh) +
autolayer(meanf(train.nh, h = 11),
series = "Mean", PI = FALSE)
autoplot(train.nh) +
autolayer(meanf(train.nh, h = 11),
series = "Mean", PI = FALSE) +
autolayer(naive(train.h, h = 11)
series = "Naïve", PI = FALSE)
autoplot(train.nh) +
autolayer(meanf(train.nh, h = 11),
series = "Mean", PI = FALSE) +
autolayer(naive(train.nh, h = 11)
series = "Naïve", PI = FALSE)
autoplot(train.nh) +
autolayer(meanf(train.nh, h = 11),
series = "Mean", PI = FALSE) +
autolayer(naive(train.nh, h = 11),
series = "Naïve", PI = FALSE)
autoplot(train.nh) +
autolayer(meanf(train.nh, h = 11),
series = "Mean", PI = FALSE) +
autolayer(naive(train.nh, h = 11),
series = "Naïve", PI = FALSE) +
autolayer(snaive(train.nh, h = 10),
series = "Seasonal naïve", PI = FALSE)
autoplot(train.nh) +
autolayer(meanf(train.nh, h = 11),
series = "Mean", PI = FALSE) +
autolayer(naive(train.nh, h = 11),
series = "Naïve", PI = FALSE) +
autolayer(rwf(train.nh, h = 10, drift = TRUE),
series = "Drift", PI = FALSE)
autoplot(train.nh) +
autolayer(meanf(train.nh, h = 11),
series = "Mean", PI = FALSE) +
autolayer(naive(train.nh, h = 11),
series = "Naïve", PI = FALSE) +
autolayer(rwf(train.nh, h = 10, drift = TRUE),
series = "Drift", PI = FALSE) +
autolayer(test.nh)
checkresiduals(rwf(train.nh, drift = TRUE))
autoplot(train.nh) +
autolayer(meanf(train.nh, h = 11),
series = "Mean", PI = FALSE) +
autolayer(naive(train.nh, h = 11),
series = "Naïve", PI = FALSE) +
autolayer(rwf(train.nh, h = 10, drift = TRUE),
series = "Drift", PI = FALSE) +
autolayer(test.nh)
plot.rwf <- checkresiduals(rwf(train.nh, h = 10, drift = TRUE))
plot.rwf
plot.rwf
class(checkresiduals(rwf(train.nh, h = 10, drift = TRUE)))
meanf.pred <- meanf(train.nh, h = 11)
meanf.pred
?meanf
autoplot(train.nh) +
autolayer(meanf(train.nh, h = 11),
series = "Mean", PI = FALSE) +
autolayer(naive(train.nh, h = 11),
series = "Naïve", PI = FALSE) +
autolayer(rwf(train.nh, h = 10, drift = TRUE),
series = "Drift", PI = FALSE) +
autolayer(test.nh)
autoplot(train.nh) +
autolayer(meanf(train.nh, h = 5),
series = "Mean", PI = FALSE) +
autolayer(naive(train.nh, h = 11),
series = "Naïve", PI = FALSE) +
autolayer(rwf(train.nh, h = 10, drift = TRUE),
series = "Drift", PI = FALSE) +
autolayer(test.nh)
meanf.pred$fitted
meanf.pred[,2]
dim(meanf.pred)
class(meanf.pred)
meanf.pred$residuals
sum(meanf.pred$residuals)
meanf.pred$level
meanf.pred$mean
meanf.pred$series
meanf.pred$series - test.nh
test.nh
as.numeric(test.nh)
meanf.pred$series - as.numeric(test.nh)
as.numeric(meanf.pred$series) - as.numeric(test.nh)
class(meanf.pred$series)
class(meanf.pred$mean)
as.numeric(meanf.pred$mean)
as.numeric(meanf.pred$mean) - as.numeric(test.nh)
as.numeric(test.nh)
autoplot(train.nh)
autolayer(meanf(train.nh))
runApp()
plot(meanf(train.nh))
plot(nhtemp)
plot(modelMean)
abline(modelMean, col = "red", lwd = 2)
abline(meanf(train.nh, h = 10), col = "red")
abline(meanf.pred)
meanf.pred
abline(meanf.pred$mean, col ="red")
abline(meanf.pred$series, col ="red")
lines(meanf.pred$mean, col = "red")
meanf.pred$mean
meanf.pred$series
meanf.pred$x
meanf.pred$fitted
predict(meanf.pred)
plot(nhtemp)
lines(meanf(train.nh, h = 10))
lines(predict(meanf(train.nh, h = 10)))
predict(meanf(train.nh, h = 10))
lines(predict(meanf(train.nh, h = 10)))
lines(predict(meanf(train.nh, h = 10))$series)
test <- predict(meanf(train.nh, h = 10))
test
test$fitted
predict(meanf(train.nh, h = 10),object = 1963:1970)
test$mean
test.rwf <- predict(rwf(train.nh, h = hinput, drift = TRUE))
test.rwf <- predict(rwf(train.nh, h = 5, drift = TRUE))
test.rwf$mean
lines(test.rwf$mean)
runApp()
runApp()
runApp()
runApp()
runApp()
?plot
runApp()
runApp()
runApp()
runApp()
runApp()
plot(train.nh, xlab = "Year", ylab = "Average Temperature", lwd = 2, xlim =c(1912, 1971))
lines(test.nh, col = "gray", lwd = 2)
lines(test.nh, col = "darkgray", lwd = 2)
?lines
runApp()
?legend
runApp()
runApp()
testmean <- predict(meanf(train.nh, h = hinput))
testmean <- predict(meanf(train.nh, h = 10))
plot(nhtemp)
lines(testmean)
testmean$mean
plot(testmean$mean)
lines(testmean)
plot(nhtemp)
lines(testmean$mean)
runApp()
class(predict(meanf(train.nh)))
testmean
as.data.frame(testmean)
class(as.data.frame(testmean))
runApp()
testdf <- as.data.frame(testmean)
testdf$`Point Forecast`
rownames(testdf)
plot(testmean)
lines(testmean)
runApp()
runApp()
runApp()
?meanf
testmean[,1]
testmean
class(testmean)
runApp()
runApp()
plot(nhtemp)
lines(testmean)
lines(testmean$fitted)
lines(testmean$mean)
?reactive
predict(meanf(train.nh, h = 10))$mean
runApp()
test2 <- meanf(train.nh, h = 10)
test2
test2$mean
runApp()
meanf(train.nh)[1:10,]
dim(meanf(train.nh))
?lm
?predict
modelMean <- meanf(train.nh, h = 10)
modelNaive <- naife(train.nh, h =10)
modelNaive <- naive(train.nh, h =10)
modelDrift <- rwf(train.nh, h = 10, drift = TRUE)
class(modelMean)
class(modelNaive)
class(modelDrift)
plot(nhtemp)
lines(modelNaive)
lines(modelNaive$mean)
lines(modelNaive[,"mean"])
predict(modelNaive, 1970)
modelNaive
?predict
predict(modelNaive, n.ahead = 3)
?tslm
test.nh
View(test.nh)
modelA <- tslm(V1 ~ trend, train.nh)
train.nh
modelA <- tslm(train.nh ~ trend, train.nh)
modelA
predict(modelA, test.nh)
plot(nhtemp)
lines(predict(modelA,c(1962:1971)))
lines(predict(modelA,test.nh))
plot(predict(modelA, test.nh))
plot(modelA)
modelA
train.nh
predict(modelA, 1970)
forecast(modelA, h = 10)
predict(modelA, 5)
modelA$x
plot(nhtemp)
lines(forecast(modelA, h = 5))
predict(modelA, data.frame(1962:1971))
forecast(modelA, data.frame(1962:1971))
forecast(modelA, data.frame(1962:1970))
forecast(modelA, data.frame(1962:1970))[1]
forecast(modelA, data.frame(1962:1970))$mean
linesforecast(modelA, data.frame(1962:1970))$mean)
lines(forecast(modelA, data.frame(1962:1970))$mean)
modelMean
modelB <- tslm(train.nh ~ trend + season, train.nh)
require(forecast)
runApp()
runApp()
plot(modelMean)
plot(modelMean)
plot(modelA)
plot(forecast(modelA))
plot(forecast(modelA, level = c(0.85,0.9)))
modelB <- StructTS(train.nh,"trend")
plot(forecast(modelB))
modelB
plot(forecast(modelB, h = 10))
points(forecast(modelB, h = 10)$mean[1])
forecast(modelB, h = 10)
forecast(modelB, h = 10)$mean
forecast(modelB, h = 10)$mean[1]
?box
library("shinydashboard")
install.packages("shinydashboard")
?here
rm( list = ls())
data(cars)
View(cars)
plot(cars)
runApp()
plot(cars)
runApp()
max(cars$speed)
runApp()
runApp()
max(cars$dist)
runApp()
max(cars$speed)
runApp()
cars$speed
runApp()
cars
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("devtools")
library(devtools)
install_github('slidfy','ramnathv')
install_github('slidify','ramnathv')
install.packages("slidfiy")
library(slidify)
install.packages("Rtools")
summary(cars)
str(cars)
modelA <- lm(dist ~ speed - 1, data = cars)
predict(modelA, 20)
predict(modelA, newdata = 20)
predict(modelA, newdata = data.frame(20))
predict(modelA, newdata = data.frame(speed = 20))
?selectInput
require(shinydashboard)
install.packages("here")
library(here)
?here
?selectInput
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
?fluidRow
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
?sidebarPanel
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
runApp('~/GitHub/Week-4-Assignment/ShinyApp/StoppingDistance')
